name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  FLUTTER_VERSION: '3.19.0'
  DART_VERSION: '3.3.0'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: stable
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Run unit tests
      run: flutter test --coverage
      
    - name: Run widget tests
      run: flutter test test/widget/
      
    - name: Run integration tests
      run: flutter test test/integration/
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: stable
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Run analysis
      run: flutter analyze
      
    - name: Run format check
      run: dart format --set-exit-if-changed .
      
    - name: Run linting
      run: flutter pub run flutter_lints
      
    
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan.sarif'
        
    - name: Check for secrets
      run: |
        if grep -r "api[_-]key\|secret\|password" lib/ --exclude-dir=.git; then
          echo "Potential secrets found in code"
          exit 1
        fi

  build:
    name: Build Library
    runs-on: ubuntu-latest
    needs: [test, quality, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: stable
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build library
      run: flutter pub publish --dry-run
      
    - name: Generate documentation
      run: dart doc
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          doc/api/
          build/

  publish:
    name: Publish to Pub
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: stable
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Publish to Pub
      run: flutter pub publish --force
      env:
        PUB_TOKEN: ${{ secrets.PUB_TOKEN }}

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install and build docs
      run: |
        cd docs_website
        npm install
        npm run build
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs_website/build