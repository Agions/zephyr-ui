name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  FLUTTER_VERSION: '3.24.5'
  DART_VERSION: '3.5.4'

jobs:
  # 代码质量检查
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Get Flutter dependencies
      run: flutter pub get
      
    - name: Run Flutter analyze
      run: flutter analyze --fatal-infos
      
    - name: Run Dart format check
      run: dart format --set-exit-if-changed .
      
    - name: Run tests with coverage
      run: flutter test --coverage

  # 构建测试
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        target: [apk, web]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Get Flutter dependencies
      run: flutter pub get
      
    - name: Build ${{ matrix.target }}
      run: |
        if [ "${{ matrix.target }}" = "apk" ]; then
          flutter build apk --shrink
        elif [ "${{ matrix.target }}" = "web" ]; then
          flutter build web --shrink
        fi
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.target }}
        path: build/

  # 安全扫描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: dart
        
    - name: Perform security scan
      uses: github/codeql-action/analyze@v3

  # 部署到开发环境
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-test, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Get Flutter dependencies
      run: flutter pub get
      
    - name: Build for deployment
      run: flutter build web --shrink
      
    - name: Deploy to development
      run: |
        echo "Deploying to development environment"
        # 这里应该添加实际的部署逻辑

  # 部署到生产环境
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Get Flutter dependencies
      run: flutter pub get
      
    - name: Build for production
      run: flutter build web --obfuscate --shrink
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # 这里应该添加实际的部署逻辑

  # 发布包
  publish-package:
    name: Publish Package
    runs-on: ubuntu-latest
    needs: [build-test, security-scan]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Get Flutter dependencies
      run: flutter pub get
      
    - name: Validate package
      run: flutter pub publish --dry-run
      
    - name: Publish to pub.dev
      run: flutter pub publish --force
      env:
        PUB_TOKEN: ${{ secrets.PUB_TOKEN }}

  # 回滚机制
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    needs: [deploy-prod, deploy-dev]
    
    steps:
    - name: Rollback deployment
      run: |
        echo "Rolling back deployment due to failure"
        # 这里应该添加回滚逻辑